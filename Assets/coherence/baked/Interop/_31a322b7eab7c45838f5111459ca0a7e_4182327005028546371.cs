// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System;
    using System.Runtime.InteropServices;
    using System.Collections.Generic;
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.SimulationFrame;
    using Coherence.Entities;
    using Coherence.Utils;
    using Coherence.Brook;
    using Coherence.Core;
    using Logger = Coherence.Log.Logger;
    using UnityEngine;
    using Coherence.Toolkit;

    public struct _31a322b7eab7c45838f5111459ca0a7e_4182327005028546371 : ICoherenceComponentData
    {
        [StructLayout(LayoutKind.Explicit)]
        public struct Interop
        {
            [FieldOffset(0)]
            public System.Single knob2;
            [FieldOffset(4)]
            public System.Single knob3;
            [FieldOffset(8)]
            public System.Single knob1;
            [FieldOffset(12)]
            public System.Single timelineTime;
        }

        public void ResetFrame(AbsoluteSimulationFrame frame)
        {
            FieldsMask |= _31a322b7eab7c45838f5111459ca0a7e_4182327005028546371.knob2Mask;
            knob2SimulationFrame = frame;
            FieldsMask |= _31a322b7eab7c45838f5111459ca0a7e_4182327005028546371.knob3Mask;
            knob3SimulationFrame = frame;
            FieldsMask |= _31a322b7eab7c45838f5111459ca0a7e_4182327005028546371.knob1Mask;
            knob1SimulationFrame = frame;
            FieldsMask |= _31a322b7eab7c45838f5111459ca0a7e_4182327005028546371.timelineTimeMask;
            timelineTimeSimulationFrame = frame;
        }

        public static unsafe _31a322b7eab7c45838f5111459ca0a7e_4182327005028546371 FromInterop(IntPtr data, Int32 dataSize, InteropAbsoluteSimulationFrame* simFrames, Int32 simFramesCount)
        {
            if (dataSize != 16) {
                throw new Exception($"Given data size is not equal to the struct size. ({dataSize} != 16) " +
                    "for component with ID 153");
            }

            if (simFramesCount != 0) {
                throw new Exception($"Given simFrames size is not equal to the expected length. ({simFramesCount} != 0) " +
                    "for component with ID 153");
            }

            var orig = new _31a322b7eab7c45838f5111459ca0a7e_4182327005028546371();

            var comp = (Interop*)data;

            orig.knob2 = comp->knob2;
            orig.knob3 = comp->knob3;
            orig.knob1 = comp->knob1;
            orig.timelineTime = comp->timelineTime;

            return orig;
        }


        public static uint knob2Mask => 0b00000000000000000000000000000001;
        public AbsoluteSimulationFrame knob2SimulationFrame;
        public System.Single knob2;
        public static uint knob3Mask => 0b00000000000000000000000000000010;
        public AbsoluteSimulationFrame knob3SimulationFrame;
        public System.Single knob3;
        public static uint knob1Mask => 0b00000000000000000000000000000100;
        public AbsoluteSimulationFrame knob1SimulationFrame;
        public System.Single knob1;
        public static uint timelineTimeMask => 0b00000000000000000000000000001000;
        public AbsoluteSimulationFrame timelineTimeSimulationFrame;
        public System.Single timelineTime;

        public uint FieldsMask { get; set; }
        public uint StoppedMask { get; set; }
        public uint GetComponentType() => 153;
        public int PriorityLevel() => 100;
        public const int order = 0;
        public uint InitialFieldsMask() => 0b00000000000000000000000000001111;
        public bool HasFields() => true;
        public bool HasRefFields() => false;


        public long[] GetSimulationFrames() {
            return null;
        }

        public int GetFieldCount() => 4;


        
        public HashSet<Entity> GetEntityRefs()
        {
            return default;
        }

        public uint ReplaceReferences(Entity fromEntity, Entity toEntity)
        {
            return 0;
        }
        
        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public IEntityMapper.Error MapToRelative(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public ICoherenceComponentData Clone() => this;
        public int GetComponentOrder() => order;
        public bool IsSendOrdered() => false;

        private static readonly float _knob2_Min = -9223372036854775808f;
        private static readonly float _knob2_Max = 9223372036854775807f;
        private static readonly float _knob3_Min = -9223372036854775808f;
        private static readonly float _knob3_Max = 9223372036854775807f;
        private static readonly float _knob1_Min = -9223372036854775808f;
        private static readonly float _knob1_Max = 9223372036854775807f;
        private static readonly float _timelineTime_Min = -9223372036854775808f;
        private static readonly float _timelineTime_Max = 9223372036854775807f;

        public AbsoluteSimulationFrame? GetMinSimulationFrame()
        {
            AbsoluteSimulationFrame? min = null;


            return min;
        }

        public ICoherenceComponentData MergeWith(ICoherenceComponentData data)
        {
            var other = (_31a322b7eab7c45838f5111459ca0a7e_4182327005028546371)data;
            var otherMask = other.FieldsMask;

            FieldsMask |= otherMask;
            StoppedMask &= ~(otherMask);

            if ((otherMask & 0x01) != 0)
            {
                this.knob2SimulationFrame = other.knob2SimulationFrame;
                this.knob2 = other.knob2;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.knob3SimulationFrame = other.knob3SimulationFrame;
                this.knob3 = other.knob3;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.knob1SimulationFrame = other.knob1SimulationFrame;
                this.knob1 = other.knob1;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.timelineTimeSimulationFrame = other.timelineTimeSimulationFrame;
                this.timelineTime = other.timelineTime;
            }

            otherMask >>= 1;
            StoppedMask |= other.StoppedMask;

            return this;
        }

        public uint DiffWith(ICoherenceComponentData data)
        {
            throw new System.NotSupportedException($"{nameof(DiffWith)} is not supported in Unity");
        }

        public static uint Serialize(_31a322b7eab7c45838f5111459ca0a7e_4182327005028546371 data, bool isRefSimFrameValid, AbsoluteSimulationFrame referenceSimulationFrame, IOutProtocolBitStream bitStream, Logger logger)
        {
            if (bitStream.WriteMask(data.StoppedMask != 0))
            {
                bitStream.WriteMaskBits(data.StoppedMask, 4);
            }

            var mask = data.FieldsMask;

            if (bitStream.WriteMask((mask & 0x01) != 0))
            {

                Coherence.Utils.Bounds.Check(data.knob2, _knob2_Min, _knob2_Max, "_31a322b7eab7c45838f5111459ca0a7e_4182327005028546371.knob2", logger);


                var fieldValue = data.knob2;



                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {

                Coherence.Utils.Bounds.Check(data.knob3, _knob3_Min, _knob3_Max, "_31a322b7eab7c45838f5111459ca0a7e_4182327005028546371.knob3", logger);


                var fieldValue = data.knob3;



                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {

                Coherence.Utils.Bounds.Check(data.knob1, _knob1_Min, _knob1_Max, "_31a322b7eab7c45838f5111459ca0a7e_4182327005028546371.knob1", logger);


                var fieldValue = data.knob1;



                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {

                Coherence.Utils.Bounds.Check(data.timelineTime, _timelineTime_Min, _timelineTime_Max, "_31a322b7eab7c45838f5111459ca0a7e_4182327005028546371.timelineTime", logger);


                var fieldValue = data.timelineTime;



                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }

            mask >>= 1;

            return mask;
        }

        public static _31a322b7eab7c45838f5111459ca0a7e_4182327005028546371 Deserialize(AbsoluteSimulationFrame referenceSimulationFrame, InProtocolBitStream bitStream)
        {
            var stoppedMask = (uint)0;
            if (bitStream.ReadMask())
            {
                stoppedMask = bitStream.ReadMaskBits(4);
            }

            var val = new _31a322b7eab7c45838f5111459ca0a7e_4182327005028546371();
            if (bitStream.ReadMask())
            {

                val.knob2 = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _31a322b7eab7c45838f5111459ca0a7e_4182327005028546371.knob2Mask;
            }
            if (bitStream.ReadMask())
            {

                val.knob3 = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _31a322b7eab7c45838f5111459ca0a7e_4182327005028546371.knob3Mask;
            }
            if (bitStream.ReadMask())
            {

                val.knob1 = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _31a322b7eab7c45838f5111459ca0a7e_4182327005028546371.knob1Mask;
            }
            if (bitStream.ReadMask())
            {

                val.timelineTime = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _31a322b7eab7c45838f5111459ca0a7e_4182327005028546371.timelineTimeMask;
            }

            val.StoppedMask = stoppedMask;

            return val;
        }


        public override string ToString()
        {
            return $"_31a322b7eab7c45838f5111459ca0a7e_4182327005028546371(" +
                $" knob2: { this.knob2 }" +
                $" knob3: { this.knob3 }" +
                $" knob1: { this.knob1 }" +
                $" timelineTime: { this.timelineTime }" +
                $" Mask: { System.Convert.ToString(FieldsMask, 2).PadLeft(4, '0') }, " +
                $"Stopped: { System.Convert.ToString(StoppedMask, 2).PadLeft(4, '0') })";
        }
    }

}
