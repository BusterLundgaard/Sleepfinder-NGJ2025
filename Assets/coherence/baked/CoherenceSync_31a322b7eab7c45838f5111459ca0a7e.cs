// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    using Coherence.Toolkit;
    using Coherence.Toolkit.Bindings;
    using Coherence.Entities;
    using Coherence.ProtocolDef;
    using Coherence.Brook;
    using Coherence.Toolkit.Bindings.ValueBindings;
    using Coherence.Toolkit.Bindings.TransformBindings;
    using Coherence.Connection;
    using Coherence.SimulationFrame;
    using Coherence.Interpolation;
    using Coherence.Log;
    using Logger = Coherence.Log.Logger;
    using UnityEngine.Scripting;
    
    [UnityEngine.Scripting.Preserve]
    public class Binding_31a322b7eab7c45838f5111459ca0a7e_3e39f3213397478c99367d7a571cd99c : PositionBinding
    {   
        private global::UnityEngine.Transform CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::UnityEngine.Transform)UnityComponent;
        }

        public override global::System.Type CoherenceComponentType => typeof(WorldPosition);
        public override string CoherenceComponentName => "WorldPosition";
        public override uint FieldMask => 0b00000000000000000000000000000001;

        public override UnityEngine.Vector3 Value
        {
            get { return (UnityEngine.Vector3)(coherenceSync.coherencePosition); }
            set { coherenceSync.coherencePosition = (UnityEngine.Vector3)(value); }
        }

        protected override (UnityEngine.Vector3 value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((WorldPosition)coherenceComponent).value;
            if (!coherenceSync.HasParentWithCoherenceSync) { value += floatingOriginDelta; }

            var simFrame = ((WorldPosition)coherenceComponent).valueSimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (WorldPosition)coherenceComponent;
            if (Interpolator.IsInterpolationNone)
            {
                update.value = Value;
            }
            else
            {
                update.value = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.valueSimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new WorldPosition();
        }    
    }
    
    [UnityEngine.Scripting.Preserve]
    public class Binding_31a322b7eab7c45838f5111459ca0a7e_a65454f15bbf41a9a27acd16728b92ad : FloatBinding
    {   
        private global::DoctorsNumbers CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::DoctorsNumbers)UnityComponent;
        }

        public override global::System.Type CoherenceComponentType => typeof(_31a322b7eab7c45838f5111459ca0a7e_4182327005028546371);
        public override string CoherenceComponentName => "_31a322b7eab7c45838f5111459ca0a7e_4182327005028546371";
        public override uint FieldMask => 0b00000000000000000000000000000001;

        public override System.Single Value
        {
            get { return (System.Single)(CastedUnityComponent.knob2); }
            set { CastedUnityComponent.knob2 = (System.Single)(value); }
        }

        protected override (System.Single value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((_31a322b7eab7c45838f5111459ca0a7e_4182327005028546371)coherenceComponent).knob2;

            var simFrame = ((_31a322b7eab7c45838f5111459ca0a7e_4182327005028546371)coherenceComponent).knob2SimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (_31a322b7eab7c45838f5111459ca0a7e_4182327005028546371)coherenceComponent;
            if (Interpolator.IsInterpolationNone)
            {
                update.knob2 = Value;
            }
            else
            {
                update.knob2 = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.knob2SimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new _31a322b7eab7c45838f5111459ca0a7e_4182327005028546371();
        }    
    }
    
    [UnityEngine.Scripting.Preserve]
    public class Binding_31a322b7eab7c45838f5111459ca0a7e_4304ac5bead4417582779907b92606d3 : FloatBinding
    {   
        private global::DoctorsNumbers CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::DoctorsNumbers)UnityComponent;
        }

        public override global::System.Type CoherenceComponentType => typeof(_31a322b7eab7c45838f5111459ca0a7e_4182327005028546371);
        public override string CoherenceComponentName => "_31a322b7eab7c45838f5111459ca0a7e_4182327005028546371";
        public override uint FieldMask => 0b00000000000000000000000000000010;

        public override System.Single Value
        {
            get { return (System.Single)(CastedUnityComponent.knob3); }
            set { CastedUnityComponent.knob3 = (System.Single)(value); }
        }

        protected override (System.Single value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((_31a322b7eab7c45838f5111459ca0a7e_4182327005028546371)coherenceComponent).knob3;

            var simFrame = ((_31a322b7eab7c45838f5111459ca0a7e_4182327005028546371)coherenceComponent).knob3SimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (_31a322b7eab7c45838f5111459ca0a7e_4182327005028546371)coherenceComponent;
            if (Interpolator.IsInterpolationNone)
            {
                update.knob3 = Value;
            }
            else
            {
                update.knob3 = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.knob3SimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new _31a322b7eab7c45838f5111459ca0a7e_4182327005028546371();
        }    
    }
    
    [UnityEngine.Scripting.Preserve]
    public class Binding_31a322b7eab7c45838f5111459ca0a7e_93f24e9de5664636844ecd5972302fea : FloatBinding
    {   
        private global::DoctorsNumbers CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::DoctorsNumbers)UnityComponent;
        }

        public override global::System.Type CoherenceComponentType => typeof(_31a322b7eab7c45838f5111459ca0a7e_4182327005028546371);
        public override string CoherenceComponentName => "_31a322b7eab7c45838f5111459ca0a7e_4182327005028546371";
        public override uint FieldMask => 0b00000000000000000000000000000100;

        public override System.Single Value
        {
            get { return (System.Single)(CastedUnityComponent.knob1); }
            set { CastedUnityComponent.knob1 = (System.Single)(value); }
        }

        protected override (System.Single value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((_31a322b7eab7c45838f5111459ca0a7e_4182327005028546371)coherenceComponent).knob1;

            var simFrame = ((_31a322b7eab7c45838f5111459ca0a7e_4182327005028546371)coherenceComponent).knob1SimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (_31a322b7eab7c45838f5111459ca0a7e_4182327005028546371)coherenceComponent;
            if (Interpolator.IsInterpolationNone)
            {
                update.knob1 = Value;
            }
            else
            {
                update.knob1 = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.knob1SimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new _31a322b7eab7c45838f5111459ca0a7e_4182327005028546371();
        }    
    }
    
    [UnityEngine.Scripting.Preserve]
    public class Binding_31a322b7eab7c45838f5111459ca0a7e_422becbd34d54166b055192ce9fb8539 : FloatBinding
    {   
        private global::DoctorsNumbers CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::DoctorsNumbers)UnityComponent;
        }

        public override global::System.Type CoherenceComponentType => typeof(_31a322b7eab7c45838f5111459ca0a7e_4182327005028546371);
        public override string CoherenceComponentName => "_31a322b7eab7c45838f5111459ca0a7e_4182327005028546371";
        public override uint FieldMask => 0b00000000000000000000000000001000;

        public override System.Single Value
        {
            get { return (System.Single)(CastedUnityComponent.timelineTime); }
            set { CastedUnityComponent.timelineTime = (System.Single)(value); }
        }

        protected override (System.Single value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((_31a322b7eab7c45838f5111459ca0a7e_4182327005028546371)coherenceComponent).timelineTime;

            var simFrame = ((_31a322b7eab7c45838f5111459ca0a7e_4182327005028546371)coherenceComponent).timelineTimeSimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (_31a322b7eab7c45838f5111459ca0a7e_4182327005028546371)coherenceComponent;
            if (Interpolator.IsInterpolationNone)
            {
                update.timelineTime = Value;
            }
            else
            {
                update.timelineTime = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.timelineTimeSimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new _31a322b7eab7c45838f5111459ca0a7e_4182327005028546371();
        }    
    }

    [UnityEngine.Scripting.Preserve]
    public class CoherenceSync_31a322b7eab7c45838f5111459ca0a7e : CoherenceSyncBaked
    {
        private Entity entityId;
        private Logger logger = Coherence.Log.Log.GetLogger<CoherenceSync_31a322b7eab7c45838f5111459ca0a7e>();
        
        
        
        private IClient client;
        private CoherenceBridge bridge;
        
        private readonly Dictionary<string, Binding> bakedValueBindings = new Dictionary<string, Binding>()
        {
            ["3e39f3213397478c99367d7a571cd99c"] = new Binding_31a322b7eab7c45838f5111459ca0a7e_3e39f3213397478c99367d7a571cd99c(),
            ["a65454f15bbf41a9a27acd16728b92ad"] = new Binding_31a322b7eab7c45838f5111459ca0a7e_a65454f15bbf41a9a27acd16728b92ad(),
            ["4304ac5bead4417582779907b92606d3"] = new Binding_31a322b7eab7c45838f5111459ca0a7e_4304ac5bead4417582779907b92606d3(),
            ["93f24e9de5664636844ecd5972302fea"] = new Binding_31a322b7eab7c45838f5111459ca0a7e_93f24e9de5664636844ecd5972302fea(),
            ["422becbd34d54166b055192ce9fb8539"] = new Binding_31a322b7eab7c45838f5111459ca0a7e_422becbd34d54166b055192ce9fb8539(),
        };
        
        private Dictionary<string, Action<CommandBinding, CommandsHandler>> bakedCommandBindings = new Dictionary<string, Action<CommandBinding, CommandsHandler>>();
        
        public CoherenceSync_31a322b7eab7c45838f5111459ca0a7e()
        {
        }
        
        public override Binding BakeValueBinding(Binding valueBinding)
        {
            if (bakedValueBindings.TryGetValue(valueBinding.guid, out var bakedBinding))
            {
                valueBinding.CloneTo(bakedBinding);
                return bakedBinding;
            }
            
            return null;
        }
        
        public override void BakeCommandBinding(CommandBinding commandBinding, CommandsHandler commandsHandler)
        {
            if (bakedCommandBindings.TryGetValue(commandBinding.guid, out var commandBindingBaker))
            {
                commandBindingBaker.Invoke(commandBinding, commandsHandler);
            }
        }
        
        public override void ReceiveCommand(IEntityCommand command)
        {
            switch (command)
            {
                default:
                    logger.Warning(Coherence.Log.Warning.ToolkitBakedSyncReceiveCommandUnhandled,
                        $"CoherenceSync_31a322b7eab7c45838f5111459ca0a7e Unhandled command: {command.GetType()}.");
                    break;
            }
        }
        
        public override List<ICoherenceComponentData> CreateEntity(bool usesLodsAtRuntime, string archetypeName, AbsoluteSimulationFrame simFrame)
        {
            if (!usesLodsAtRuntime)
            {
                return null;
            }
            
            if (Archetypes.IndexForName.TryGetValue(archetypeName, out int archetypeIndex))
            {
                var components = new List<ICoherenceComponentData>()
                {
                    new ArchetypeComponent
                    {
                        index = archetypeIndex,
                        indexSimulationFrame = simFrame,
                        FieldsMask = 0b1
                    }
                };

                return components;
            }
    
            logger.Warning(Coherence.Log.Warning.ToolkitBakedSyncCreateEntityMissingArchetype,
                $"Unable to find archetype {archetypeName} in dictionary. Please, bake manually (coherence > Bake)");
            
            return null;
        }
        
        public override void Dispose()
        {
        }
        
        public override void Initialize(Entity entityId, CoherenceBridge bridge, IClient client, CoherenceInput input, Logger logger)
        {
            this.logger = logger.With<CoherenceSync_31a322b7eab7c45838f5111459ca0a7e>();
            this.bridge = bridge;
            this.entityId = entityId;
            this.client = client;        
        }
    }
}
